## Example given in the course for creating a special "vector", which is really a list containing a function to
## - set the value of the vector
## - get the value of the vector
## - set the value of the mean
## - get the value of the mean
makeVector <- function(x = numeric()) {
        m <- NULL
        set <- function(y) {
                x <<- y
                m <<- NULL
        }
        get <- function() x
        setmean <- function(mean) m <<- mean
        getmean <- function() m
        list(set = set, get = get,
             setmean = setmean,
             getmean = getmean)
}


## Similarly, the next function is creating a special "matrix", which really is a list, containing a function to
## - set the value of the matrix
## - get the value of the matrix
## - set the value of the matrix
## - get the value of the matrix

makeCacheMatrix <- function(x = matrix()) {
    i <- NULL  # setting the inverse
  set <- function(y) {
          x <<- y
          i <<- NULL
  }
  get <- function() x
  setinverse <- function(inverse) i <<- inverse
  getinverse <- function() i
  list(set = set, get = get,
       setinverse = setinverse,
       getinverse = getinverse)
}


## Example given in the course for calculating the mean of the "special vector"
## but it first checks if the mean has been calculated before, if yes, then pulls if from the cache
## and skips the calculation. Otherwise it calculates the mean, and sets the value of the mean 
## in the cache via the setmean 

cachemean <- function(x, ...) {
        m <- x$getmean()
        if(!is.null(m)) {
                message("getting cached data")
                return(m)
        }
        data <- x$get()
        m <- mean(data, ...)
        x$setmean(m)
        m
}


## Similarly here I am calculating the inverse of the "special matrix"
## First it checks if the inverse has been calculated before, if yes, then pulls if from the cache via getinverse
## and skips the calculation. Otherwise it calculates the inverse, and sets the value of the mx inverse 
## in the cache via the setinverse 

cacheSolve <- function(x, ...) {
  i <- x$getinverse()
  if (!is.null(i)) {
          message("pulling data from cache")
          return(i)
  }
  data <- x$get()
  i <- solve(data, ...)
  x$setinverse(i)
  i
}


## Examples for testing
## Creating an invertible matrix
m<-matrix(runif(1e6,1,10),1e3,1e3)

## creating the "special matrix"
m1 <- makeCacheMatrix(m)

## first calculating the inverse
start_time <- Sys.time()
cacheSolve(m1) #the inverse of m is calculated
finish_time <- Sys.time()
print(c("execution time: ", finish_time - start_time))

## next, pullink it from cache
start_time <- Sys.time()
cacheSolve(m1) #the inverse is returned from cache
finish_time <- Sys.time()
print(c("execution time: ", finish_time - start_time))

